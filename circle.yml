version: 2
jobs:
  # Run st2 Unit Tests
  unit:
    machine: true
    parallelism: 2
    environment:
      - TERM: xterm
    working_directory: ~/st2
    steps:
      - checkout
      - run:
          name: Prepare the environment
          command: |
            set -x
            sudo .circle/install-mongo.sh
            sudo .circle/configure-rabbitmq.sh
            sudo apt-get -qq -y install python-virtualenv python-dev
      - run:
          name: Create stanley user
          command: sudo .circle/add-itest-user.sh
      - run:
          name: Install pip requirements
          command: make requirements
      - run:
          name: Run st2 Unit Tests
          command: make ci-unit

  # Run Integration tests
  integration:
    docker:
      - image: circleci/python:2.7
      - image: mongo:3.4
      - image: rabbitmq:3
    working_directory: ~/st2
    steps:
      - checkout
      - run:
          # Download the mongo shell, needed to connect to Docker container + delete the DB
          name: Install Mongo Shell
          command: |
            set -x
            sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 0C49F3730359A14518585931BC711F9BA15703C6
            echo "deb http://repo.mongodb.org/apt/debian jessie/mongodb-org/3.4 main" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list
            sudo apt-get -qq -y update
            sudo apt-get -qq -y install mongodb-org-shell
      - run:
          name: Create stanley user
          command: sudo .circle/add-itest-user.sh
      - run:
          name: Install pip requirements
          command: make requirements
      - run:
          name: Run st2 Integration Tests
          command: make ci-integration

  # Build & Test st2 packages
  packages:
    parallelism: 4
    # 4CPUs & 8GB RAM CircleCI machine
    resource_class: large
    docker:
      # The primary container is an instance of the first list image listed. Your build commands run in this container.
      - image: circleci/python:2.7
    working_directory: ~/st2
    environment:
      - DISTROS: "trusty xenial el6 el7"
      - ST2_PACKAGES_REPO: https://github.com/StackStorm/st2-packages
      - ST2_PACKAGES: "st2"
      - DEPLOY_PACKAGES: 0
      - BASH_ENV: ~/.buildenv
    steps:
      - run:
          name: TEMPORARY exit Here to save timing
          command: exit 1
      - checkout
      - setup_remote_docker:
          reusable: true    # default - false
          exclusive: true   # default - true
      - run:
          name: Docker version
          command: |
            set -x
            docker --version
            docker-compose --version
      - run:
          name: Download st2-packages repository
          command: |
            set -x
            git clone ${ST2_PACKAGES_REPO} ~/st2-packages
            cd ~/st2-packages
            git checkout ${CIRCLE_BRANCH} || true
      - run:
          name: Initialize packages Build Environment
          command: |
            set -x
            .circle/buildenv_st2.sh
            .circle/buildenv_mistral.sh
          working_directory: ~/st2-packages
      - run:
          # Workaround for CircleCI docker-compose limtation where volumes don't work
          # See detailed explanation: https://circleci.com/docs/2.0/building-docker-images/#mounting-folders
          name: Copy st2-packages files to build containers
          command: |
            # Remove st2-packages-vol container if exists in CircleCI cache
            docker rm -f st2-packages-vol || true
            # creating dummy container which will hold a volume with data files
            docker create -v /root/st2-packages -v /root/build -v /var/log/st2 -v /var/log/mistral -v /root/.cache/pip -v /tmp/wheelhouse --name st2-packages-vol alpine:3.4 /bin/true
            # copy st2-packages data files into this volume
            docker cp ~/st2-packages st2-packages-vol:/root
      - run:
          name: Pull dependent Docker Images
          command: |
            # Clean-up running containers from the previous build
            .circle/docker-compose2.sh clean
            # Pull Docker images
            .circle/docker-compose2.sh pull ${DISTRO}
          working_directory: ~/st2-packages
      - run:
          name: Build the ${DISTRO} Packages
          command: |
            .circle/docker-compose2.sh build ${DISTRO}
            # Once build container finishes we can copy packages directly from it
            docker cp st2-packages-vol:/root/build /tmp/st2-packages
          working_directory: ~/st2-packages
#      # TODO: It works! (~0.5-1min speed-up) Enable CircleCI2.0 cache for pip and wheelhouse later
#      - run:
#          name: Build the ${DISTRO} Packages 2nd time (compare with pip/wheelhouse cached)
#          command: |
#            .circle/docker-compose2.sh build ${DISTRO}
#            # Once build container finishes we can copy packages directly from it
#            docker cp st2-packages-vol:/root/build /tmp/st2-packages
#          working_directory: ~/st2-packages
      - run:
          name: Test the Packages
          command: |
            .circle/docker-compose2.sh test ${DISTRO}
            # Once test container finishes we can copy logs directly from it
            mkdir -p /tmp/st2-packages/log
            docker cp st2-packages-vol:/var/log/st2 /tmp/st2-packages/log/st2
            docker cp st2-packages-vol:/var/log/mistral /tmp/st2-packages/log/mistral
            # Clean-up running containers
            .circle/docker-compose2.sh clean
          working_directory: ~/st2-packages
      - store_artifacts:
          path: /tmp/st2-packages

  # Trigger st2 webhook to run end2end tests
  trigger_e2etests:
    docker:
      # The primary container is an instance of the first list image listed. Your build commands run in this container.
      - image: circleci/python:2.7
    working_directory: ~/st2
    steps:
      - run:
          name: Docker version
          command: |
            set -x
            docker --version
            docker-compose --version

  # Deploy produced deb/rpm packages
  deploy:
    docker:
      # The primary container is an instance of the first list image listed. Your build commands run in this container.
      - image: circleci/python:2.7
    working_directory: ~/st2
    steps:
      - run:
          name: Docker version
          command: |
            set -x
            docker --version
            docker-compose --version

# Putting everything together
workflows:
  version: 2
  package-test-and-deploy:
    jobs:
      - unit
      - integration
      - packages
      - trigger_e2etests:
          requires:
            - packages
      - deploy:
          requires:
            - unit
            - integration
            - packages
          filters:
            branches:
              only:
                - master
                - /v[0-9]+\.[0-9]+/

experimental:
  notify:
    branches:
      only:
        - master
        - /v[0-9]+\.[0-9]+/
