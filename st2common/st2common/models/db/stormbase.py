import mongoengine as me


class StormFoundationDB(me.Document):
    """Absolute minimal representation of a model entity. This foundation
       class should only be directly inherited from for system-created objects.
       Attribute:
           uri : the uri for the entity.
           id : unique identifer for the entity. (UUID)
    """
    # ObjectIdField should be not have any constraints like required,
    # unique etc for it to be auto-generated.
    # TODO: Work out how we can mark this as a unique primary key.
    id = me.ObjectIdField()
    uri = me.URLField()

    # see http://docs.mongoengine.org/guide/defining-documents.html#
    # abstract-classes
    meta = {
        'abstract': True
    }

    def __str__(self):
        result = []
        result.append('%s@' % self.__class__.__name__)
        result.append(str(id(self)))
        result.append('(')
        add_sep = False
        for fieldname in self._fields:
            if add_sep:
                result.append(', ')
            result.append('%s="%s"' % (fieldname, getattr(self, fieldname)))
            add_sep = True
        result.append(')')
        return ''.join(result)


class StormBaseDB(StormFoundationDB):
    """Minimal representation of a model entity where the entity is created by users.
    Attribute:
        uri : uri of the entity.
        name : name of the entity.
        description : description of the entity.
        id : unique identifier for the entity. If none is provided it
        will be auto generated by the system.
    """
    name = me.StringField(required=True, unique=True)
    description = me.StringField()

    # see http://docs.mongoengine.org/guide/defining-documents.html#
    # abstract-classes
    meta = {
        'abstract': True
    }
